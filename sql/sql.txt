bFunciones de grupo: count(campo(, max(campo), min(campo), avg(campo), sum(campo)
select c1, ..., cn-1, fx(cn) FROM tx GROUP BY c1,...., cn-1

Ejemplo: SELECT max(salary) from ....

	SELECT count (employee_id) FROM Tabla



select departamento_id, max(salary) from empleados GROUP BY departamento_id

((Agrupar siempre con GROUP BY))




- having condition -----> Poner condiciones sobre la función de grupo, ya que dicha condicion no
se puede establecer en la clausula where. SOLO PARA FUNCIONES DE GRUPO


---->>>Ejemplo: Muestra la suma de salario por departamento, siempre que dicha
		suma sea superior a un valor.



 
- ORDER BY ----> Ordenar los datos, por defecto ascendente, sino order by cx. Por nombre de campo o
posición. 
		




FUNCIONES NUMÉRICAS

- abs---> Valor absoluto
- sqrt ---> Raíz cuadrada
- ceiling(x) ----> entero superior mas próximo al valor x 
- floor(x) ----> entero inferior más próximo al valor x
- round(x,x) ----> Redondear
- trunc (x,x) ----> Parte entera
- greatest (1,2,3,4) ----> Devuelve el valor mayor
- least (1,2,3,4) ----> Devuelve el valor menor
- mod (x,m) -----> Devuelve el resto de la división
- sign (x) ------> Devuelve -1 si es negativo y 1 si es positivo y 0 si el número es 0




FUNCIONES CARACTERES

- concat ---->concatenar caractares ( con , o || )
- substr (n, m) -----> extrae desde n, los m siguientes.
- instr (campoy, 'cadenax', n, m) ----> Devuelve la posicion de la m ocurrencia de la cadena x, dentro
del campo y comenzando por n.
- length (cadena) ----> longitud de la cadena
- upper ----> convierte a mayúscula
- lower ----> convierte a minúsculas
- lpad (cadena, long, cadena2) ----> Añade por la izquierda la cadena 2 a la cadena1
hasta alcanzar la longitud.
- rpad ----> lo mismo pero añade a la derecha
- ltrim (cadena1,cadena2) ----> Devuelve la cadena1, eliminando por su izquierda los
caracteres que contiene la cadena 1. tambien puede eliminar los espacios en blanco: 
('   almeria')

- rtrim ----> igual pero por la derecha
- replace (cadena1, cadena2) ---> Reemplazas la cadena2, por la cadena1) 
replace ('almeria', 'a', 'x') reemplazas en almeria, las a por las x-->xlmerix

FUNCIONES DE FECHAS

- las fechas se pueden restar, la diferencia sería el número de días.

- SYSDATE---> Fecha del sistema en el formato por defecto
- MONTHS_BETWEEN (FECHA1, FECHA2) ----> devuelve el numero de meses entre las fechas
- extract(year | month| day )----> extraer una de esas opciones --->
select extract ( year from sysdate ) from dual ---> 2019





FUNCIONES DE CONVERSIÓN

- to_number ('4') ----> Devuelve un número a partir de una cadena de caracteres
- to_date  ('fecha', 'fmt') -----> convertir a fecha
- to_char ----> recibe una fecha y nos devuelve una cadena de caracteres en el formato qu eligas
		dia----> d (1-31) dd (1-365) day
		mes----> mm (1-12) mon (3 primeras letras del mes) month (nombre del mes
		año----> yyyy yy year(año en letra)
		siglo--> cc
		horas--> hh24 hhpm hham
		minutos---> mi (2digitos: 1-60)  
		segundos--> ss (2digitos)




OTRAS FUNCIONES

-  nvl(campo, valor) -----> Comprobar si es nulo. Campo y valor tiene que ser del mismo tipo.
-  decode ( campo, 'v1, dv1,v2,dv2,.....vn,dvn[dotro])----> busca la primera coincidencia de la
primera cadena v, dentro del campo, devolviendo el correspondiente dvsx asociado. 
si no hay coincidencia devuelve el valor de otro, que al ser opcional, puede no devolver nada.

- case campo 
	when v1 then dv1
	when v2 then dv2
	-----------
	when vn then dvn
	[else dotro]
   end case




------>>>> Donde se utilizan las funcione ----------->>>>>

select fx(campo)
from tx
where fy (campo)





BORRADO DE DATOS

- delete from tx [where condition]
- truncate table tx ---> Borra todo el contenido de una tabla. No se puede deshacer.


MODIFICACIÓN DE DATOS

- update tx set c1=v1, ...,cd = vn [where condition]  Puede ser un valor estático u otro dato de esa tabla.



INSERCIÓN

- insert into tx [(c1, ..., cn]) values (v1. v2...., vn)
- insert into tx [(c1, ..., cn]) select x1, ..., xn from ty...



TRANSACCIÓN----> Cambio en los datos y pendiente de ser confirmada o revocada.
		Mientras no es confirmada el cambio en los datos solo es visible por la sesión de 
		base de datos del usuario que la genera.
		
	
		- commit ---> confirma la transacción. ((( solo para delete, update)) 
		- rollback ---> deshace la transacción.
		- savepoint ---> hace commit hasta una marca.

		




CREACIÓN DE TABLAS

- create table tx 
  (c1 tipo_dato [restriccion*],
   c2 tipo_dato [restriccion],
  -----------
   cn tipo_dato [restriccion],
   [, constraint name primary key  (c1,...cx)]
   [, constraint name2 foreign key  (c1,...ca)] references ty (x1, ...,xa)]




*TIPO DE RESTRICCIONES

- not null ---> No puede ser nulo
- primary key ---> Los datos de esa columnan identificados de forma única/ No puede tener null
- unique ----> Registro único pero si puede tener valor null.
- check ( campo operador valor ) ---> Restringir el conjunto de valores que hay en ese campo.
- references ty (cx) ---> Referencia un campo de otra tabla.

---->>>>Ejemplo----->>>>


create table alumno(
dni varchar2(10) primary key,
nombre varchar2(30) not null,
edad number (3) not null,
edad number(3) not null,
sexo varchar2(1) check ( sexo in ('v', 'h'))



----->>>>>Ejemplo------>>>>

create table notas(
dni varchar2(10) not null,
asignatura varchar2(20) not null,
nota number (3,1) not null,
constraint pk_notas primary key (dni, asignatura))

(((Primary key formada por dos campos )))))


create table notas(
dni varchar2(10) not null,
asignatura varchar2(20) not null,
nota number (3,1) not null,
constraint pk_notas primary key (dni, asignatura),
constraint fk_dni foreign key (dni) references alumno(dni))




BORRADO DE TABLAS

- drop table tx;

MODIFICAR ESTRUCTURAS DE TABLAS
UP(
- alter table tx add column ( nombre tipo_dato [restriccion])
- alter table tx drop column name
alter table tx add primary key ( c1, ..., cx)
alter table tx drop primary key
alter table drop constraint name
alter table disable | enable constraint name----> Desactiva o activa esa constraint





----------------->>>>>> EJERCICIOS ---------------->>>>>>>>>


1. Media de salario por cargo (job), teniendo en cuenta los empleados con salario > 4000
Y siempre que la media sea superior a 5000 mil euros.


2. Las 3 primeras iniciales del nombre de los empleados junto con el número de años
enteros que llevan en la empresa, ordenando en descendente por este último dato.

3. Nombre del empleado, el año que ingresó en la empresa y su salario y comisión incrementado
en un 20%, para los empleados de los departamentos 10, 20 y 50.









OPERADORES DE CONJUNTOS


- union ---> Devuelve los elementos de los conjuntos, pero los repetidos solo una vez. Los campos
	que se unen deben de ser del mismo tipo. 

- union all ---> Devuelve todos los elementos de los conjuntos, inclusive los repetidos.

- interset ---> Devuelve los elementos comunes.

- minus ---> Devuelve los elementos del primero conjunto que no están en el segundo. No tiene propiedad conmutativa.


select c1, c2 from tx select union c3, c4 from ty





INNER JOIN--->> uNION DE DOS O MAS TABLAS CON UN CAMPO EN COMUN, CON EL OBJETIVO DE:

	- Mostrar datos de ambas tablas.
	- Mostrar datos de una de ellas, pero evaluando condiciones sobres ambas tablas


select [ti] c1, .... [th] cn..., [t2] n,..., [t2.] ax
from t1, t2
where [t1] ca 0 [t2] cb....



OUTER JOIN--->> CUANDO SE MUESTRAN LOS ELEMENTOS NO COINCIDENTES DE AMBAS TABLAS Y ADICIONALMENTE
		MOSTRAMOS EL RESTO DE LOS REGISTROS.


		select [ti] c1, .... [th] cn..., [t2] n,..., [t2.] ax
		froim t1, t2
		where [t1] ca 0 [t2] cb (+)


SIMBOLO + ENTRE PARENTESIS EN LA CONDICION ACOMPAÑANDO AL CAMPO QUE VA AL LADO CONTRARIO
DEL CAMPO QUE REPRESENTA EL OBJETO QUE QUIERO ESPANDIR 



------------------->>>> INNER JOIN <<<<<<--------------------

SELECT TX.*, TY.* FROM TX JOIN TY ON (TY.CA = TY.CB) [WHERE.....] ((Con dos tablas))


SELECT TX.*, TY.* FROM TX JOIN TY ON (TY.CA = TY.CB) 
JOIN TZ ON (TY.CS = TZ.CH)  [WHERE.....]                   ((con tres tablas))





------------------->>>> NATURAL JOIN <<<<<<--------------------

- Unir dos tablas por los campos que tienen igual nombre
- Se puede explicitar por que cmapos quiero unir con la cláusula  using 


SELECT TX.*, TY.* 
FROM TX NATURAL JOIN TY 
 [WHERE.....] ((Con dos tablas))



SELECT TX.*, TY.* 
FROM TX NATURAL JOIN TY using (c1,...cx)
 [WHERE.....]




------------------->>>> OTHER JOIN <<<<<<--------------------


- left join ---> amplio la tabla que está a la izquierda de la sintaxis.

		
SELECT TX.*, TY.* 
FROM TX left join ty on (tx.ca = ty.cn)



- right join ---> amplio la tabla que está a la izquierda de la sintaxis.


SELECT TX.*, TY.* 
FROM TX left join ty on (tx.ca = ty.cn)




- full join ----> Devuelve los elementos que coincide, los de una y los de otra.


SELECT TX.*, TY.* 
FROM TX full join ty on (tx.ca = ty.cn)






//// sE LE PUEDEN PONER ALIAS A LAS TABLAS HR.EMPLOYEES E
---- E.EMPLOYEES_ID








SUBCONSULTAS

Consultas dentro de otras consultas

select * from tx where campo operador (select cy from ty....)

- Cuando la subconsulta devuelve 1 o 0 registros, solo se puede utiliar
los operadores de comparación : == <= 0= != in like

- si devuelve n registros, utilizar el in, >any,  >all
- en el select de la subconsulta solo puedes meter tantos campos como
has pedido en el where y tienen que ser del mismo tipo.



- OPERADOR EXITS-----> WHERE EXISTS ( SUBCONSULTA) sOLO EVALUA SI DEVUELVE ALGO

















